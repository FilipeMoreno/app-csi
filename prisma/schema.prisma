generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  appointments Appointment[]
  Notification Notification[]
}

model Course {
  id   String @id @default(cuid())
  name String

  class Class[]

  @@map("courses")
}

model Class {
  id        String @id @default(cuid())
  name      String
  course_id String
  period    Period
  year      String

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@map("classes")
}

enum Period {
  MATUTINO
  VESPERTINO
}

model Sector {
  id   String @id @default(cuid())
  name String

  appointment Appointment[]

  @@map("sectors")
}

model TimeAppointment {
  id       String  @id @default(cuid())
  start    String
  end      String
  period   Period
  reserved Boolean @default(false)

  appointment Appointment[]

  @@map("times_appointments")
}

model Appointment {
  id            String   @id @default(cuid())
  date          DateTime
  activities    String
  equipament    String?
  sector_id     String
  time_id       String
  appoitment_by String

  appointmentUser User            @relation(fields: [appoitment_by], references: [id])
  sector          Sector          @relation(fields: [sector_id], references: [id], onDelete: Cascade)
  time            TimeAppointment @relation(fields: [time_id], references: [id], onDelete: Cascade)

  @@map("appointments")
}

enum DayOfWeek {
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
  DOMINGO
}

model ScheduleTimeSignal {
  id          String    @id @default(cuid())
  day_of_week DayOfWeek
  time        String
  duration    String

  @@map("schedule_times")
}

model MusicSignal {
  id     String @id @default(cuid())
  title  String
  artist String
  url    String

  @@map("music_signals")
}

enum TypeNotification {
  APPOINTMENT
  MUSIC
}

model Notification {
  id      String           @id @default(cuid())
  title   String
  date    DateTime
  user_id String
  read    Boolean          @default(false)
  url     String?
  type    TypeNotification

  user User @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

// AUTH.JS

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
